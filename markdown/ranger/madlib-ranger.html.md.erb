---
title: Using MADLib with Ranger Authorization
---

<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->


You can use MADlib, an open source library for in-database analytics, with your HAWQ installation. MADlib functions typically operate on source, output, and model tables. When Ranger is enabled for HAWQ authorization, you will need to provide access to all MADLib-related databases, schemas, tables, and functions to the appropriate users.  

Consider the following when setting up HAWQ policies for MADlib access:

- Assign `temp` permission to the database on which users will run MADlib functions.
- MADlib users often share their output tables. If this is the case in your deployment, create a shared schema dedicated to output tables, assigning `usage-schema` and `create` privileges for all MADlib users to this shared schema.
- Assign `create-schema` database permission to those MADlib users that do not choose to share their output tables.

- `madlib` Schema-Level Permissions
    - Assign `usage-schema` and `create` privileges to the `madlib` schema.
    - Assign `execute` permissions on all functions within the `madlib` schema, including any functions called within.
    - Assign `insert` and `select` permissions to all tables within the `madlib` schema.
    - Assign the `usage-schema` and `create` permissions for the current schema, and any schema in which the source, output, and model tables may reside.

- Function-Specific Permissions 
    - Assign `insert` and `select` permissions for the source, output, and model tables.
    - Assign `insert` and `select` permissions for the output \_summary and \__group tables.

